создадим деплой 
kubectl create deployment svс-deploy --image k8sphp
отмасштабируем его
kubectl scale deployment svс-deploy --replacas 3
проверим
kubectl get podes
создадим сервис
kubectl expose deployment svс-deploy --type=ClusterIP --port 80
kubectl get services
проверим работу балансировки
curl <здесь ip>
curl <здесь ip>
curl <здесь ip>
должны быть разные ip в выдаче, что показывает что мы каждый раз попадаем на разные поды
убъём сервис
kubectl delete service svс-deploy
другой вариант сервиса
kubectl expose deployment svс-deploy --type=NodePort --port 80
kubectl get service
смотрим полученый порт
открываем браузер и пишем
<IPХоста>:<Port>
kubectl delete svc svс-deploy

посмотреть ip хоста можно с помощью
kubectl describe nodes

ТОЛЬКО ДЛЯ ОБЛАЧНЫХ СЕРВИСОВ
kubectl expose deployment svс-deploy --type=LoadBalancer --port 80
kubectl get service
вы увидите ip балансировщика
kubectl delete svc svс-deploy


создадим манифест
mkdir my_services
cd my_services
vim service-1-clusterip-single.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
	name: my-web-deploy
	labels: 
		app: my-k8s-deploy
spec:
	replicas: 3
	selector:
		matchLabels:
			app: superapp
	template
		metadata:
			labels:
				app: superapp #Сервис смотрит на под с этим лейблом
		spec: 
			containers:
				- name: superapp-web
				  image: k8sphp:latest
				  ports:
					- containerPort: 80
---
apiVersion: v1
kind: Service
metadata: 
	name: my-single-pod-service
	labels: 
		env: prod
		owner: IvanKlimarev
spec:
	selector: #тип сервиса
		app: superapp # Выбор пода по лейблу
	ports:
		- name: app-listener
		  protocol: TCP
		  port: 80 # port on Host
		  targetPort: 80 # port on POD
	type: ClusterIP

проверяем
kubectl apply -f service-1-clusterip-single.yaml
kubectl get deploy
kubectl get svc
смотрим IP и проверяем через браузер



мультиконейнерный сервис

vim service-2-clusterip-multi.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
	name: my-web-deploy-multi-pods
	labels: 
		app: my-k8s-deploy
spec:
	replicas: 3
	selector:
		matchLabels:
			app: MegaApp
	template
		metadata:
			labels:
				app: MegaApp #Сервис смотрит на под с этим лейблом
		spec: 
			containers:
				- name: my-web
					image: k8sphp:latest
					ports:
						- containerPort: 80

				- name: not-my-web
					image: tomcat
					ports:
						- containerPort: 8080

---
apiVersion: v1
kind: Service
metadata: 
	name: my-multi-pods-service
	labels: 
		env: prod
		owner: IvanKlimarev
spec:
	selector: #тип сервиса
		app: MegaApp # Выбор пода по лейблу
	ports:
		- name: my-web-app-listner
		  protocol: TCP
		  port: 80 # port on LoadBalancer
		  targetPort: 80 # port on POD
		- name: not-my-web-app-listner
		  protocol: TCP
		  port: 8888 # port on LoadBalancer
		  targetPort: 8080 # port on POD

	type: ClusterIP

проверяем
kubectl apply -f service-2-clusterip-multi.yaml
kubectl get deploy
kubectl get svc
смотрим IP и проверяем через браузер
