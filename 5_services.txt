создадим деплой 
kubectl create deployment svс-deploy --image k8sphp
отмасштабируем его
kubectl scale deployment svс-deploy --replacas 3
проверим
kubectl get podes
создадим сервис
kubectl expose deployment svс-deploy --type=ClusterIP --port 80
kubectl get services
проверим работу балансировки
curl <здесь ip>
curl <здесь ip>
curl <здесь ip>
должны быть разные ip в выдаче, что показывает что мы каждый раз попадаем на разные поды
убъём сервис
kubectl delete service svс-deploy
другой вариант сервиса
kubectl expose deployment svс-deploy --type=NodePort --port 80
kubectl get service
смотрим полученый порт
открываем браузер и пишем
<IPХоста>:<Port>
kubectl delete svc svс-deploy

посмотреть ip хоста можно с помощью
kubectl describe nodes

ТОЛЬКО ДЛЯ ОБЛАЧНЫХ СЕРВИСОВ
kubectl expose deployment svс-deploy --type=LoadBalancer --port 80
kubectl get service
вы увидите ip балансировщика
kubectl delete svc svс-deploy


создадим манифест
mkdir my_services
cd my_services
vim service-1-clusterip-single.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-web-deploy
spec:
  replicas: 3
  selector:
    matchLabels:
      app: my-k8s-deploy
  template:
    metadata:
      labels:
        app: my-k8s-deploy
    spec:
      containers:
      - name: super-app-web
        image: kollekcioner47/myk8sapp:1.0
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: my-single-pod-service
spec:
  selector:
    app: my-k8s-deploy
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30000
  type: NodePort

проверяем
kubectl apply -f service-1-clusterip-single.yaml
kubectl get deploy
kubectl get svc
смотрим IP и проверяем через браузер



мультиконейнерный сервис

vim service-2-clusterip-multi.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-web-deploy-multi
spec:
  replicas: 3
  selector:
    matchLabels:
      app: my-k8s-deploy2
  template:
    metadata:
      labels:
        app: my-k8s-deploy2
    spec:
      containers:
      - name: mega-app-web
        image: kollekcioner47/myk8sapp:1.0
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 80
      
      - name: mega-app-not-web
        image: tomcat:11.0
        resources:
          limits:
            memory: "1024Mi"
            cpu: "1000m"
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: my-multi-pod-service
spec:
  selector:
    app: my-k8s-deploy2
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30001
  type: NodePort

проверяем
kubectl apply -f service-2-clusterip-multi.yaml
kubectl get deploy
kubectl get svc
смотрим IP и проверяем через браузер
